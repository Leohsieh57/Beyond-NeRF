// Generated by gencpp from file my_listener/TimeTransform.msg
// DO NOT EDIT!


#ifndef MY_LISTENER_MESSAGE_TIMETRANSFORM_H
#define MY_LISTENER_MESSAGE_TIMETRANSFORM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace my_listener
{
template <class ContainerAllocator>
struct TimeTransform_
{
  typedef TimeTransform_<ContainerAllocator> Type;

  TimeTransform_()
    : geo_trans()
    , t1()
    , t2()  {
    }
  TimeTransform_(const ContainerAllocator& _alloc)
    : geo_trans(_alloc)
    , t1()
    , t2()  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _geo_trans_type;
  _geo_trans_type geo_trans;

   typedef ros::Time _t1_type;
  _t1_type t1;

   typedef ros::Time _t2_type;
  _t2_type t2;





  typedef boost::shared_ptr< ::my_listener::TimeTransform_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_listener::TimeTransform_<ContainerAllocator> const> ConstPtr;

}; // struct TimeTransform_

typedef ::my_listener::TimeTransform_<std::allocator<void> > TimeTransform;

typedef boost::shared_ptr< ::my_listener::TimeTransform > TimeTransformPtr;
typedef boost::shared_ptr< ::my_listener::TimeTransform const> TimeTransformConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_listener::TimeTransform_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_listener::TimeTransform_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_listener::TimeTransform_<ContainerAllocator1> & lhs, const ::my_listener::TimeTransform_<ContainerAllocator2> & rhs)
{
  return lhs.geo_trans == rhs.geo_trans &&
    lhs.t1 == rhs.t1 &&
    lhs.t2 == rhs.t2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_listener::TimeTransform_<ContainerAllocator1> & lhs, const ::my_listener::TimeTransform_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_listener

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_listener::TimeTransform_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_listener::TimeTransform_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_listener::TimeTransform_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_listener::TimeTransform_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_listener::TimeTransform_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_listener::TimeTransform_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_listener::TimeTransform_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b05693e338e8c00beb115d4348be07e1";
  }

  static const char* value(const ::my_listener::TimeTransform_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb05693e338e8c00bULL;
  static const uint64_t static_value2 = 0xeb115d4348be07e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_listener::TimeTransform_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_listener/TimeTransform";
  }

  static const char* value(const ::my_listener::TimeTransform_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_listener::TimeTransform_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Transform geo_trans\n"
"time t1\n"
"time t2\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::my_listener::TimeTransform_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_listener::TimeTransform_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.geo_trans);
      stream.next(m.t1);
      stream.next(m.t2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeTransform_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_listener::TimeTransform_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_listener::TimeTransform_<ContainerAllocator>& v)
  {
    s << indent << "geo_trans: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_trans);
    s << indent << "t1: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t1);
    s << indent << "t2: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_LISTENER_MESSAGE_TIMETRANSFORM_H
